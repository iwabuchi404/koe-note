/**
 * „Çø„Éñ„Éê„Éº„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
 * Èñã„ÅÑ„Å¶„ÅÑ„Çã„Çø„Éñ„ÅÆË°®Á§∫„Å®„Çø„ÉñÂàá„ÇäÊõø„ÅàÊ©üËÉΩ„ÇíÊèê‰æõ
 */

import React, { useCallback, useState } from 'react'
import { useTabContext } from '../../contexts/TabContext'
import { TabType, TabStatus } from '../../types/TabTypes'
import './TabBar.css'

const TabBar: React.FC = () => {
  const { tabs, activeTabId, activateTab, closeTab } = useTabContext()
  const [draggedTabId, setDraggedTabId] = useState<string | null>(null)

  // „Çø„Éñ„ÇØ„É™„ÉÉ„ÇØÂá¶ÁêÜ
  const handleTabClick = useCallback((tabId: string) => {
    activateTab(tabId)
  }, [activateTab])

  // „Çø„ÉñÈñâ„Åò„ÇãÂá¶ÁêÜ
  const handleCloseTab = useCallback((e: React.MouseEvent, tabId: string) => {
    e.stopPropagation()
    closeTab(tabId)
  }, [closeTab])

  // „Éâ„É©„ÉÉ„Ç∞ÈñãÂßã
  const handleDragStart = useCallback((e: React.DragEvent, tabId: string) => {
    setDraggedTabId(tabId)
    e.dataTransfer.effectAllowed = 'move'
  }, [])

  // „Éâ„É©„ÉÉ„Ç∞ÁµÇ‰∫Ü
  const handleDragEnd = useCallback(() => {
    setDraggedTabId(null)
  }, [])

  // „Çø„Éñ„Ç¢„Ç§„Ç≥„É≥ÂèñÂæó
  const getTabIcon = (type: TabType, status: TabStatus): string => {
    if (status === TabStatus.LOADING) return '‚è≥'
    if (status === TabStatus.ERROR) return '‚ùå'
    
    switch (type) {
      case TabType.WELCOME:
        return 'üè†'
      case TabType.RECORDING:
        return status === TabStatus.RECORDING ? '‚è∫Ô∏è' : 'üéôÔ∏è'
      case TabType.ADVANCED_RECORDING:
        return status === TabStatus.RECORDING ? 'üî¥' : 'üöÄ'
      case TabType.PLAYER:
        return status === TabStatus.PLAYING ? '‚ñ∂Ô∏è' : status === TabStatus.EDITING ? '‚úèÔ∏è' : 'üìÑ'
      default:
        return 'üìÑ'
    }
  }

  // „Çø„Éñ„Çπ„ÉÜ„Éº„Çø„ÇπË°®Á§∫
  const getStatusIndicator = (status: TabStatus): React.ReactNode => {
    switch (status) {
      case TabStatus.RECORDING:
        return <span className="status-indicator recording">‚óè</span>
      case TabStatus.TRANSCRIBING:
        return <span className="status-indicator transcribing">‚ö°</span>
      case TabStatus.LOADING:
        return <span className="status-indicator loading">‚è≥</span>
      case TabStatus.ERROR:
        return <span className="status-indicator error">!</span>
      default:
        return null
    }
  }

  if (tabs.length === 0) {
    return null
  }

  return (
    <div className="tab-bar">
      <div className="tab-list">
        {tabs.map((tab, index) => (
          <div
            key={tab.id}
            className={`tab ${tab.isActive ? 'active' : ''} ${tab.status} ${draggedTabId === tab.id ? 'dragging' : ''}`}
            onClick={() => handleTabClick(tab.id)}
            draggable
            onDragStart={(e) => handleDragStart(e, tab.id)}
            onDragEnd={handleDragEnd}
            title={`${tab.title} - ${tab.status}`}
          >
            <span className="tab-icon">{getTabIcon(tab.type, tab.status)}</span>
            <span className="tab-title">{tab.title}</span>
            {getStatusIndicator(tab.status)}
            
            {/* Èñâ„Åò„Çã„Éú„Çø„É≥ */}
            {tab.isClosable && (
              <button
                className="tab-close-button"
                onClick={(e) => handleCloseTab(e, tab.id)}
                title="„Çø„Éñ„ÇíÈñâ„Åò„Çã"
              >
                √ó
              </button>
            )}
          </div>
        ))}
      </div>
      
    </div>
  )
}

export default TabBar